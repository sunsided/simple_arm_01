#!/usr/bin/env python

import math
import rospy
from sensor_msgs.msg import Image, JointState
from simple_arm.srv import *


class LookAway(object):

    def __init__(self):
        rospy.init_node('look_away', log_level=rospy.INFO)
        self.last_position = None
        self.arm_moving = False

        # Wait for Gazebo to become ready.
        rospy.wait_for_message('/simple_arm/joint_states', JointState)
        rospy.wait_for_message('/rgb_camera/image_raw', Image)

        # The first subscriber, self.sub1, subscribes to the /simple_arm/joint_states 
        # topic. The node is written to check the camera only when the arm 
        # is not moving, and by subscribing to /simple_arm/joint_states, changes
        # in the position of the arm can be tracked. The message type for this
        # topic is JointState, and with each message, the message data is passed
        # to the joint_states_callback function.
        self.sub1 = rospy.Subscriber('/simple_arm/joint_states', 
                                    JointState, self.joint_states_callback)

        # The second subscriber, self.sub2, subscribes to the /rgb_camera/image_raw
        # topic. The message type here is Image, and with each message, the 
        # look_away_callback function is called.
        self.sub2 = rospy.Subscriber('/rgb_camera/image_raw', 
                                    Image, self.look_away_callback)
        
        # A ServiceProxy is how rospy enables calling a service from a node. 
        # The ServiceProxy here is created using the name of the service you 
        # wish to call along with the service class definition: in this case 
        # /arm_mover/safe_move and GoToPosition. The actual calls to the 
        # service will take place in the look_away_callback method below.
        self.safe_move = rospy.ServiceProxy('/arm_mover/safe_move', 
                                    GoToPosition)
        rospy.spin()

    # The uniform_image method takes an image as input and checks if all 
    # color values in the image are the same as the value of the first pixel.
    # This essentially checks that all the color values in the image are the same.
    def uniform_image(self, image):
        return all(value == image[0] for value in image)

    # The coord_equal method returns True if the coordinates coord_1 and coord_2
    # have equal components up to the specified tolerance.
    def coord_equal(self, coord_1, coord_2):
        if coord_1 is None or coord_2 is None:
            return False
        tolerance = .0005
        result = abs(coord_1[0] - coord_2[0]) <= abs(tolerance)
        result = result and abs(coord_1[1] - coord_2[1]) <= abs(tolerance)
        return result

    def joint_states_callback(self, data):
        if self.coord_equal(data.position, self.last_position):
            self.arm_moving = False
        else:
            self.last_position = data.position
            self.arm_moving = True

    def look_away_callback(self, data):
        if not self.arm_moving and self.uniform_image(data.data):
            try:
                rospy.wait_for_service('/arm_mover/safe_move')
                msg = GoToPositionRequest()
                msg.joint_1 = 1.57
                msg.joint_2 = 1.57
                response = self.safe_move(msg)

                rospy.logwarn("Camera detecting uniform image. \
                               Elapsed time to look at something nicer:\n%s", 
                               response)

            except rospy.ServiceException, e:
                rospy.logwarn("Service call failed: %s", e)


if __name__ == '__main__':
    try: 
        LookAway()
    except rospy.ROSInterruptException:
        pass
